{"ast":null,"code":"import { useContext } from 'react';\nimport { UserContext } from '../containers/App';\nimport { loadUser } from '../helpers/localStorage';\nimport * as userEndpoints from '../endpoints/user';\n\nconst useUser = () => {\n  const currentUser = useContext(UserContext);\n\n  if (currentUser.user) {\n    return {\n      user: currentUser.user,\n      setUser: currentUser.setUser\n    };\n  }\n\n  const localStoredUser = loadUser();\n\n  if (localStoredUser) {\n    const fetchUser = async () => {\n      const res = await userEndpoints.getSingle(localStoredUser.id);\n      await currentUser.setUser(res);\n      return {\n        user: currentUser.user,\n        setUser: currentUser.setUser\n      };\n    };\n\n    fetchUser();\n  }\n\n  return undefined;\n};\n\nexport default useUser;","map":{"version":3,"sources":["/Users/fjpu/Code/frontend-postApp/src/customHooks/useUser.tsx"],"names":["useContext","UserContext","loadUser","userEndpoints","useUser","currentUser","user","setUser","localStoredUser","fetchUser","res","getSingle","id","undefined"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,QAAT,QAAmC,yBAAnC;AACA,OAAO,KAAKC,aAAZ,MAA+B,mBAA/B;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAMC,WAAW,GAAGL,UAAU,CAACC,WAAD,CAA9B;;AACA,MAAII,WAAW,CAACC,IAAhB,EAAsB;AACpB,WAAO;AAAEA,MAAAA,IAAI,EAAED,WAAW,CAACC,IAApB;AAA0BC,MAAAA,OAAO,EAAEF,WAAW,CAACE;AAA/C,KAAP;AACD;;AACD,QAAMC,eAAe,GAAGN,QAAQ,EAAhC;;AACA,MAAIM,eAAJ,EAAqB;AACnB,UAAMC,SAAS,GAAG,YAAY;AAC5B,YAAMC,GAAG,GAAG,MAAMP,aAAa,CAACQ,SAAd,CAAwBH,eAAe,CAACI,EAAxC,CAAlB;AACA,YAAMP,WAAW,CAACE,OAAZ,CAAoBG,GAApB,CAAN;AACA,aAAO;AAAEJ,QAAAA,IAAI,EAAED,WAAW,CAACC,IAApB;AAA0BC,QAAAA,OAAO,EAAEF,WAAW,CAACE;AAA/C,OAAP;AACD,KAJD;;AAKAE,IAAAA,SAAS;AACV;;AACD,SAAOI,SAAP;AACD,CAfD;;AAiBA,eAAeT,OAAf","sourcesContent":["import { useContext } from 'react';\nimport { UserContext } from '../containers/App';\nimport { loadUser, saveUser } from '../helpers/localStorage';\nimport * as userEndpoints from '../endpoints/user';\n\nconst useUser = () => {\n  const currentUser = useContext(UserContext);\n  if (currentUser.user) {\n    return { user: currentUser.user, setUser: currentUser.setUser };\n  }\n  const localStoredUser = loadUser();\n  if (localStoredUser) {\n    const fetchUser = async () => {\n      const res = await userEndpoints.getSingle(localStoredUser.id!);\n      await currentUser.setUser(res);\n      return { user: currentUser.user, setUser: currentUser.setUser };\n    };\n    fetchUser();\n  }\n  return undefined;\n};\n\nexport default useUser;\n"]},"metadata":{},"sourceType":"module"}