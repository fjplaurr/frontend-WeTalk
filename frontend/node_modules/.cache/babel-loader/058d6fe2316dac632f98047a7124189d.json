{"ast":null,"code":"const getTimeInterval = a => {\n  let seconds = Math.floor((Date.now() - a.getTime()) / 1000);\n  let unit = 'second';\n  let direction = 'ago';\n\n  if (seconds < 0) {\n    seconds = -seconds;\n    direction = 'from now';\n  }\n\n  let value = seconds;\n\n  if (seconds >= 31536000) {\n    value = Math.floor(seconds / 31536000);\n    unit = 'year';\n  } else if (seconds >= 86400) {\n    value = Math.floor(seconds / 86400);\n    unit = 'day';\n  } else if (seconds >= 3600) {\n    value = Math.floor(seconds / 3600);\n    unit = 'hour';\n  } else if (seconds >= 60) {\n    value = Math.floor(seconds / 60);\n    unit = 'minute';\n  }\n\n  if (value !== 1) {\n    unit = `${unit}s`;\n  }\n\n  console.log('returning');\n  console.log(`${value} ${unit} ${direction}`);\n  return `${value} ${unit} ${direction}`;\n  console.log('returning');\n  console.log('');\n  return '';\n};\n\nexport { getTimeInterval };","map":{"version":3,"sources":["/Users/fjpu/Code/frontend-postApp/src/helpers/functions.ts"],"names":["getTimeInterval","a","seconds","Math","floor","Date","now","getTime","unit","direction","value","console","log"],"mappings":"AAAA,MAAMA,eAAe,GAAIC,CAAD,IAAa;AAEnC,MAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACC,IAAI,CAACC,GAAL,KAAaL,CAAC,CAACM,OAAF,EAAd,IAA6B,IAAxC,CAAd;AACA,MAAIC,IAAI,GAAG,QAAX;AACA,MAAIC,SAAS,GAAG,KAAhB;;AACA,MAAIP,OAAO,GAAG,CAAd,EAAiB;AACfA,IAAAA,OAAO,GAAG,CAACA,OAAX;AACAO,IAAAA,SAAS,GAAG,UAAZ;AACD;;AACD,MAAIC,KAAK,GAAGR,OAAZ;;AACA,MAAIA,OAAO,IAAI,QAAf,EAAyB;AACvBQ,IAAAA,KAAK,GAAGP,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,QAArB,CAAR;AACAM,IAAAA,IAAI,GAAG,MAAP;AACD,GAHD,MAGO,IAAIN,OAAO,IAAI,KAAf,EAAsB;AAC3BQ,IAAAA,KAAK,GAAGP,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,KAArB,CAAR;AACAM,IAAAA,IAAI,GAAG,KAAP;AACD,GAHM,MAGA,IAAIN,OAAO,IAAI,IAAf,EAAqB;AAC1BQ,IAAAA,KAAK,GAAGP,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,IAArB,CAAR;AACAM,IAAAA,IAAI,GAAG,MAAP;AACD,GAHM,MAGA,IAAIN,OAAO,IAAI,EAAf,EAAmB;AACxBQ,IAAAA,KAAK,GAAGP,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,EAArB,CAAR;AACAM,IAAAA,IAAI,GAAG,QAAP;AACD;;AACD,MAAIE,KAAK,KAAK,CAAd,EAAiB;AACfF,IAAAA,IAAI,GAAI,GAAEA,IAAK,GAAf;AACD;;AACDG,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAa,GAAEF,KAAM,IAAGF,IAAK,IAAGC,SAAU,EAA1C;AACA,SAAQ,GAAEC,KAAM,IAAGF,IAAK,IAAGC,SAAU,EAArC;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ;AACA,SAAO,EAAP;AACD,CAhCD;;AAkCA,SAASZ,eAAT","sourcesContent":["const getTimeInterval = (a: Date) => {\n\n  let seconds = Math.floor((Date.now() - a.getTime()) / 1000);\n  let unit = 'second';\n  let direction = 'ago';\n  if (seconds < 0) {\n    seconds = -seconds;\n    direction = 'from now';\n  }\n  let value = seconds;\n  if (seconds >= 31536000) {\n    value = Math.floor(seconds / 31536000);\n    unit = 'year';\n  } else if (seconds >= 86400) {\n    value = Math.floor(seconds / 86400);\n    unit = 'day';\n  } else if (seconds >= 3600) {\n    value = Math.floor(seconds / 3600);\n    unit = 'hour';\n  } else if (seconds >= 60) {\n    value = Math.floor(seconds / 60);\n    unit = 'minute';\n  }\n  if (value !== 1) {\n    unit = `${unit}s`;\n  }\n  console.log('returning')\n  console.log(`${value} ${unit} ${direction}`)\n  return `${value} ${unit} ${direction}`;\n  console.log('returning')\n  console.log('')\n  return '';\n};\n\nexport { getTimeInterval };\n"]},"metadata":{},"sourceType":"module"}