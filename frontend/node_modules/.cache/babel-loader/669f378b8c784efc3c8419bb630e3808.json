{"ast":null,"code":"var _jsxFileName = \"/Users/fjpu/Code/frontend-postApp/src/containers/Home/ReadingSection/ReadingSection.component.tsx\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport style from './ReadingSection.module.scss';\nimport PostCard from '../../../components/PostCard';\nimport { UserContext } from '../../App';\nimport * as userEndpoints from '../../../endpoints/user';\nimport ProfileHeader from './ProfileHeader';\n\nconst ReadingSection = () => {\n  const [posts, setPosts] = useState([]);\n  const contextUser = useContext(UserContext); // Realoads posts from followed users every time the user\n  // changes (for instance, when following/unfollowing users).\n  // It also reloads when the user sends a post\n\n  useEffect(() => {\n    const getPostsFromAllFollowedusers = async () => {\n      const followedUsersPosts = await userEndpoints.getPostsFromFollowedUsers(contextUser.user._id);\n      const ownPosts = await userEndpoints.getUsersPosts(contextUser.user._id);\n      ownPosts.forEach((post, index) => {\n        const postCopy = { ...post\n        };\n        postCopy.date = new Date(postCopy.date);\n        ownPosts[index] = postCopy;\n      });\n      setPosts([...followedUsersPosts, ...ownPosts]);\n    };\n\n    const getPostsFromOneUser = async () => {\n      const usersPosts = await userEndpoints.getUsersPosts(contextUser.watchingOtherProfileId);\n      usersPosts.forEach((post, index) => {\n        const postCopy = { ...post\n        };\n        postCopy.date = new Date(postCopy.date);\n        usersPosts[index] = postCopy;\n      });\n      setPosts([...usersPosts]);\n    };\n\n    contextUser.watchingOtherProfileId ? getPostsFromOneUser() : getPostsFromAllFollowedusers();\n  }, [contextUser]);\n  const getPosts = posts.map((post, index) => {\n    var _post$author$profileI2;\n\n    if (contextUser.watchingOtherProfileId) {\n      var _post$author$profileI;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: post._id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(PostCard, {\n        name: post.author.name,\n        surname: post.author.surname,\n        message: post.text,\n        pictureUrl: (_post$author$profileI = post.author.profileImage) === null || _post$author$profileI === void 0 ? void 0 : _post$author$profileI.url,\n        last: posts.length - 1 === index,\n        timestamp: post.date,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: post._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PostCard, {\n      name: post.author.name,\n      surname: post.author.surname,\n      message: post.text,\n      pictureUrl: (_post$author$profileI2 = post.author.profileImage) === null || _post$author$profileI2 === void 0 ? void 0 : _post$author$profileI2.url,\n      last: posts.length - 1 === index,\n      timestamp: post.date,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }));\n  });\n\n  const postsFromEveryone = () => getPosts;\n\n  const PostFromOne = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProfileHeader, {\n    userId: contextUser.watchingOtherProfileId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }), getPosts);\n\n  useEffect(() => {\n    console.log('posts are');\n    console.log(posts);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: style.readingSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, contextUser.watchingOtherProfileId ? PostFromOne() : postsFromEveryone());\n};\n\nexport default ReadingSection;","map":{"version":3,"sources":["/Users/fjpu/Code/frontend-postApp/src/containers/Home/ReadingSection/ReadingSection.component.tsx"],"names":["React","useState","useEffect","useContext","style","PostCard","UserContext","userEndpoints","ProfileHeader","ReadingSection","posts","setPosts","contextUser","getPostsFromAllFollowedusers","followedUsersPosts","getPostsFromFollowedUsers","user","_id","ownPosts","getUsersPosts","forEach","post","index","postCopy","date","Date","getPostsFromOneUser","usersPosts","watchingOtherProfileId","getPosts","map","author","name","surname","text","profileImage","url","length","postsFromEveryone","PostFromOne","console","log","readingSection"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport style from './ReadingSection.module.scss';\nimport PostCard from '../../../components/PostCard';\nimport { Post } from '../../../interfaces/Post';\nimport { UserContext } from '../../App';\nimport * as userEndpoints from '../../../endpoints/user';\nimport ProfileHeader from './ProfileHeader';\n\nconst ReadingSection = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const contextUser = useContext(UserContext);\n\n  // Realoads posts from followed users every time the user\n  // changes (for instance, when following/unfollowing users).\n  // It also reloads when the user sends a post\n  useEffect(() => {\n    const getPostsFromAllFollowedusers = async () => {\n      const followedUsersPosts: Post[] = await userEndpoints.getPostsFromFollowedUsers(contextUser.user!._id!);\n      const ownPosts: Post[] = await userEndpoints.getUsersPosts(contextUser.user!._id!);\n      ownPosts.forEach((post, index) => {\n        const postCopy = { ...post };\n        postCopy.date = new Date(postCopy.date);\n        ownPosts[index] = postCopy;\n      });\n      setPosts([...followedUsersPosts, ...ownPosts]);\n    };\n    const getPostsFromOneUser = async () => {\n      const usersPosts: Post[] = await userEndpoints.getUsersPosts(contextUser.watchingOtherProfileId);\n      usersPosts.forEach((post, index) => {\n        const postCopy = { ...post };\n        postCopy.date = new Date(postCopy.date);\n        usersPosts[index] = postCopy;\n      });\n      setPosts([...usersPosts]);\n    };\n    contextUser.watchingOtherProfileId ? getPostsFromOneUser() : getPostsFromAllFollowedusers();\n  }, [contextUser]);\n\n  const getPosts = posts.map((post: Post, index: number) => {\n    if (contextUser.watchingOtherProfileId) {\n      return (\n        <React.Fragment key={post._id}>\n          <PostCard\n            name={post.author.name}\n            surname={post.author.surname}\n            message={post.text}\n            pictureUrl={post.author.profileImage?.url}\n            last={posts.length - 1 === index}\n            timestamp={post.date}\n          />\n        </React.Fragment>\n      );\n    }\n    return (\n      <React.Fragment key={post._id}>\n        <PostCard\n          name={post.author.name}\n          surname={post.author.surname}\n          message={post.text}\n          pictureUrl={post.author.profileImage?.url}\n          last={posts.length - 1 === index}\n          timestamp={post.date}\n        />\n      </React.Fragment>\n    );\n  });\n\n  const postsFromEveryone = () => getPosts;\n\n  const PostFromOne = () => (\n    <>\n      <ProfileHeader userId={contextUser.watchingOtherProfileId} />\n      {getPosts}\n    </>\n  );\n\n  useEffect(() => {\n    console.log('posts are');\n    console.log(posts);\n  }, []);\n\n  return (\n    <section className={style.readingSection}>\n      {contextUser.watchingOtherProfileId ? PostFromOne() : postsFromEveryone()}\n    </section>\n  );\n};\n\nexport default ReadingSection;\n"]},"metadata":{},"sourceType":"module"}