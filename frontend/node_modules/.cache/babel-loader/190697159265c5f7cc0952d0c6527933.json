{"ast":null,"code":"const getTimeInterval = a => {\n  console.log('timestamp received');\n  console.log(a);\n\n  function isDate(obj) {\n    return obj.foo !== undefined;\n  }\n\n  if (isDate(a)) {\n    let seconds = Math.floor((Date.now() - a.getTime()) / 1000);\n    let unit = 'second';\n    let direction = 'ago';\n\n    if (seconds < 0) {\n      seconds = -seconds;\n      direction = 'from now';\n    }\n\n    let value = seconds;\n\n    if (seconds >= 31536000) {\n      value = Math.floor(seconds / 31536000);\n      unit = 'year';\n    } else if (seconds >= 86400) {\n      value = Math.floor(seconds / 86400);\n      unit = 'day';\n    } else if (seconds >= 3600) {\n      value = Math.floor(seconds / 3600);\n      unit = 'hour';\n    } else if (seconds >= 60) {\n      value = Math.floor(seconds / 60);\n      unit = 'minute';\n    }\n\n    if (value !== 1) {\n      unit = `${unit}s`;\n    }\n\n    console.log('returning');\n    console.log(`${value} ${unit} ${direction}`);\n    return `${value} ${unit} ${direction}`;\n  }\n\n  console.log('returning');\n  console.log('');\n  return '';\n};\n\nexport { getTimeInterval };","map":{"version":3,"sources":["/Users/fjpu/Code/frontend-postApp/src/helpers/functions.ts"],"names":["getTimeInterval","a","console","log","isDate","obj","foo","undefined","seconds","Math","floor","Date","now","getTime","unit","direction","value"],"mappings":"AAAA,MAAMA,eAAe,GAAIC,CAAD,IAAa;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;;AACA,WAASG,MAAT,CAAgBC,GAAhB,EAAuC;AACrC,WAAOA,GAAG,CAACC,GAAJ,KAAYC,SAAnB;AACD;;AACD,MAAIH,MAAM,CAACH,CAAD,CAAV,EAAe;AACb,QAAIO,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACC,IAAI,CAACC,GAAL,KAAaX,CAAC,CAACY,OAAF,EAAd,IAA6B,IAAxC,CAAd;AACA,QAAIC,IAAI,GAAG,QAAX;AACA,QAAIC,SAAS,GAAG,KAAhB;;AACA,QAAIP,OAAO,GAAG,CAAd,EAAiB;AACfA,MAAAA,OAAO,GAAG,CAACA,OAAX;AACAO,MAAAA,SAAS,GAAG,UAAZ;AACD;;AACD,QAAIC,KAAK,GAAGR,OAAZ;;AACA,QAAIA,OAAO,IAAI,QAAf,EAAyB;AACvBQ,MAAAA,KAAK,GAAGP,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,QAArB,CAAR;AACAM,MAAAA,IAAI,GAAG,MAAP;AACD,KAHD,MAGO,IAAIN,OAAO,IAAI,KAAf,EAAsB;AAC3BQ,MAAAA,KAAK,GAAGP,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,KAArB,CAAR;AACAM,MAAAA,IAAI,GAAG,KAAP;AACD,KAHM,MAGA,IAAIN,OAAO,IAAI,IAAf,EAAqB;AAC1BQ,MAAAA,KAAK,GAAGP,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,IAArB,CAAR;AACAM,MAAAA,IAAI,GAAG,MAAP;AACD,KAHM,MAGA,IAAIN,OAAO,IAAI,EAAf,EAAmB;AACxBQ,MAAAA,KAAK,GAAGP,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,EAArB,CAAR;AACAM,MAAAA,IAAI,GAAG,QAAP;AACD;;AACD,QAAIE,KAAK,KAAK,CAAd,EAAiB;AACfF,MAAAA,IAAI,GAAI,GAAEA,IAAK,GAAf;AACD;;AACDZ,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAEa,KAAM,IAAGF,IAAK,IAAGC,SAAU,EAA1C;AACA,WAAQ,GAAEC,KAAM,IAAGF,IAAK,IAAGC,SAAU,EAArC;AACD;;AACDb,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ;AACA,SAAO,EAAP;AACD,CAtCD;;AAwCA,SAASH,eAAT","sourcesContent":["const getTimeInterval = (a: Date) => {\n  console.log('timestamp received')\n  console.log(a)\n  function isDate(obj: any): obj is Date {\n    return obj.foo !== undefined;\n  }\n  if (isDate(a)) {\n    let seconds = Math.floor((Date.now() - a.getTime()) / 1000);\n    let unit = 'second';\n    let direction = 'ago';\n    if (seconds < 0) {\n      seconds = -seconds;\n      direction = 'from now';\n    }\n    let value = seconds;\n    if (seconds >= 31536000) {\n      value = Math.floor(seconds / 31536000);\n      unit = 'year';\n    } else if (seconds >= 86400) {\n      value = Math.floor(seconds / 86400);\n      unit = 'day';\n    } else if (seconds >= 3600) {\n      value = Math.floor(seconds / 3600);\n      unit = 'hour';\n    } else if (seconds >= 60) {\n      value = Math.floor(seconds / 60);\n      unit = 'minute';\n    }\n    if (value !== 1) {\n      unit = `${unit}s`;\n    }\n    console.log('returning')\n    console.log(`${value} ${unit} ${direction}`)\n    return `${value} ${unit} ${direction}`;\n  }\n  console.log('returning')\n  console.log('')\n  return '';\n};\n\nexport { getTimeInterval };\n"]},"metadata":{},"sourceType":"module"}