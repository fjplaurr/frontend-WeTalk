{"ast":null,"code":"var _jsxFileName = \"/Users/fjpu/Code/frontend-postApp/src/components/TextInput/TextInput.component.tsx\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport styles from './TextInput.module.scss';\n\nconst TextInput = ({\n  type,\n  onChange,\n  placeholder,\n  minLength,\n  children,\n  color = 'smokeWhite',\n  idInput\n}) => {\n  const [value, setValue] = useState('');\n\n  const stateChange = event => {\n    onChange && onChange(event);\n    setValue(event.target.value);\n  };\n\n  const labelRef = useRef(null);\n  const inputRef = useRef(null);\n  const inputClass = color === 'white' ? styles.inputWhite : styles.inputSmokeWhite; // Changes label's className to be able to put it on top of the input when it is\n  // not focused but contains data writen by the user.\n\n  useEffect(() => {\n    var _inputRef$current;\n\n    if ((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value) {\n      labelRef.current.className = `${styles.label} ${styles.labelOnTop}`;\n    } else {\n      labelRef.current.className = `${styles.label}`;\n    }\n  }, [value]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.textInputWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, children && children, /*#__PURE__*/React.createElement(\"input\", {\n    className: inputClass,\n    required: true,\n    onChange: stateChange,\n    value: value,\n    type: type,\n    minLength: minLength,\n    ref: inputRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    ref: labelRef,\n    htmlFor: idInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, placeholder)));\n};\n\nexport default TextInput;","map":{"version":3,"sources":["/Users/fjpu/Code/frontend-postApp/src/components/TextInput/TextInput.component.tsx"],"names":["React","useState","useRef","useEffect","styles","TextInput","type","onChange","placeholder","minLength","children","color","idInput","value","setValue","stateChange","event","target","labelRef","inputRef","inputClass","inputWhite","inputSmokeWhite","current","className","label","labelOnTop","container","textInputWrapper"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAqCC,MAArC,EAA6CC,SAA7C,QAA8D,OAA9D;AACA,OAAOC,MAAP,MAAmB,yBAAnB;;AAYA,MAAMC,SAAS,GAAG,CAAC;AACjBC,EAAAA,IADiB;AACXC,EAAAA,QADW;AACDC,EAAAA,WADC;AACYC,EAAAA,SADZ;AACuBC,EAAAA,QADvB;AACiCC,EAAAA,KAAK,GAAG,YADzC;AACuDC,EAAAA;AADvD,CAAD,KAEI;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;;AACA,QAAMc,WAAuD,GAAIC,KAAD,IAAW;AACzET,IAAAA,QAAQ,IAAIA,QAAQ,CAACS,KAAD,CAApB;AACAF,IAAAA,QAAQ,CAACE,KAAK,CAACC,MAAN,CAAaJ,KAAd,CAAR;AACD,GAHD;;AAIA,QAAMK,QAAQ,GAAGhB,MAAM,CAAmB,IAAnB,CAAvB;AACA,QAAMiB,QAAQ,GAAGjB,MAAM,CAAmB,IAAnB,CAAvB;AACA,QAAMkB,UAAU,GAAGT,KAAK,KAAK,OAAV,GAAoBP,MAAM,CAACiB,UAA3B,GAAwCjB,MAAM,CAACkB,eAAlE,CARoB,CASpB;AACA;;AACAnB,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,6BAAIgB,QAAQ,CAACI,OAAb,sDAAI,kBAAkBV,KAAtB,EAA6B;AAC3BK,MAAAA,QAAQ,CAAEK,OAAV,CAAmBC,SAAnB,GAAgC,GAAEpB,MAAM,CAACqB,KAAM,IAAGrB,MAAM,CAACsB,UAAW,EAApE;AACD,KAFD,MAEO;AACLR,MAAAA,QAAQ,CAAEK,OAAV,CAAmBC,SAAnB,GAAgC,GAAEpB,MAAM,CAACqB,KAAM,EAA/C;AACD;AACF,GANQ,EAMN,CAACZ,KAAD,CANM,CAAT;AAOA,sBACE;AAAK,IAAA,SAAS,EAAET,MAAM,CAACuB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAEvB,MAAM,CAACwB,gBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGlB,QAAQ,IAAIA,QADf,eAEE;AACE,IAAA,SAAS,EAAEU,UADb;AAEE,IAAA,QAAQ,MAFV;AAGE,IAAA,QAAQ,EAAEL,WAHZ;AAIE,IAAA,KAAK,EAAEF,KAJT;AAKE,IAAA,IAAI,EAAEP,IALR;AAME,IAAA,SAAS,EAAEG,SANb;AAOE,IAAA,GAAG,EAAEU,QAPP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAWE;AACE,IAAA,GAAG,EAAED,QADP;AAEE,IAAA,OAAO,EAAEN,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGJ,WAJH,CAXF,CADF,CADF;AAsBD,CA1CD;;AA4CA,eAAeH,SAAf","sourcesContent":["import React, { useState, ReactNode, useRef, useEffect } from 'react';\nimport styles from './TextInput.module.scss';\n\ntype TextInputProps = {\n  type: 'text' | 'email' | 'password';\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  minLength?: number;\n  children?: ReactNode;\n  color?: 'white' | 'smokeWhite';\n  idInput: string;\n}\n\nconst TextInput = ({\n  type, onChange, placeholder, minLength, children, color = 'smokeWhite', idInput,\n}: TextInputProps) => {\n  const [value, setValue] = useState('');\n  const stateChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    onChange && onChange(event);\n    setValue(event.target.value);\n  };\n  const labelRef = useRef<HTMLLabelElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const inputClass = color === 'white' ? styles.inputWhite : styles.inputSmokeWhite;\n  // Changes label's className to be able to put it on top of the input when it is\n  // not focused but contains data writen by the user.\n  useEffect(() => {\n    if (inputRef.current?.value) {\n      labelRef!.current!.className = `${styles.label} ${styles.labelOnTop}`;\n    } else {\n      labelRef!.current!.className = `${styles.label}`;\n    }\n  }, [value]);\n  return (\n    <div className={styles.container}>\n      <div className={styles.textInputWrapper}>\n        {children && children}\n        <input\n          className={inputClass}\n          required\n          onChange={stateChange}\n          value={value}\n          type={type}\n          minLength={minLength}\n          ref={inputRef}\n        />\n        <label\n          ref={labelRef}\n          htmlFor={idInput}\n        >\n          {placeholder}\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default TextInput;\n"]},"metadata":{},"sourceType":"module"}