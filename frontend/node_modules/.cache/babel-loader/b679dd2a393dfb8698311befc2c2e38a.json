{"ast":null,"code":"var _jsxFileName = \"/Users/fjpu/Code/frontend-postApp/src/containers/Home/ReadingSection/ReadingSection.component.tsx\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport style from './ReadingSection.module.scss';\nimport PostCard from '../../../components/PostCard';\nimport { UserContext } from '../../App';\nimport * as userEndpoints from '../../../endpoints/user';\n\nconst ReadingSection = () => {\n  const [posts, setPosts] = useState([]);\n  const contextUser = useContext(UserContext); // Realoads posts from followed users every time the user\n  // changes (for instance, when following/unfollowing users).\n  // It also reloads when the user sends a post\n\n  useEffect(() => {\n    const getPosts = async () => {\n      const followedUsersPosts = await userEndpoints.getPostsFromFollowedUsers(contextUser.user._id);\n      const ownPosts = await userEndpoints.getUsersPosts(contextUser.user._id);\n      setPosts([...followedUsersPosts, ...ownPosts]);\n    };\n\n    getPosts();\n  }, [contextUser.user, contextUser.isPosting]); // const seePostsFromUser = async () => {\n  //   const posts = await getUsersPosts(id);\n  //   contextUser.watchingOtherProfileId(id);\n  // }\n\n  useEffect(() => {\n    console.log('seeing profile');\n    console.log(id);\n  }, [contextUser.watchingOtherProfileId]);\n  const postsList = posts.map(post => {\n    var _post$author$profileI;\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: post._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(PostCard, {\n      name: post.author.name,\n      surname: post.author.surname,\n      message: post.text,\n      pictureUrl: (_post$author$profileI = post.author.profileImage) === null || _post$author$profileI === void 0 ? void 0 : _post$author$profileI.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }));\n  });\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: style.readingSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, postsList);\n};\n\nexport default ReadingSection;","map":{"version":3,"sources":["/Users/fjpu/Code/frontend-postApp/src/containers/Home/ReadingSection/ReadingSection.component.tsx"],"names":["React","useState","useEffect","useContext","style","PostCard","UserContext","userEndpoints","ReadingSection","posts","setPosts","contextUser","getPosts","followedUsersPosts","getPostsFromFollowedUsers","user","_id","ownPosts","getUsersPosts","isPosting","console","log","id","watchingOtherProfileId","postsList","map","post","author","name","surname","text","profileImage","url","readingSection"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AAEA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAO,KAAKC,aAAZ,MAA+B,yBAA/B;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAS,EAAT,CAAlC;AACA,QAAMU,WAAW,GAAGR,UAAU,CAACG,WAAD,CAA9B,CAF2B,CAI3B;AACA;AACA;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,QAAQ,GAAG,YAAY;AAC3B,YAAMC,kBAA0B,GAAG,MAAMN,aAAa,CAACO,yBAAd,CAAwCH,WAAW,CAACI,IAAZ,CAAkBC,GAA1D,CAAzC;AACA,YAAMC,QAAgB,GAAG,MAAMV,aAAa,CAACW,aAAd,CAA4BP,WAAW,CAACI,IAAZ,CAAkBC,GAA9C,CAA/B;AACAN,MAAAA,QAAQ,CAAC,CAAC,GAAGG,kBAAJ,EAAwB,GAAGI,QAA3B,CAAD,CAAR;AACD,KAJD;;AAKAL,IAAAA,QAAQ;AACT,GAPQ,EAON,CAACD,WAAW,CAACI,IAAb,EAAmBJ,WAAW,CAACQ,SAA/B,CAPM,CAAT,CAP2B,CAgB3B;AACA;AACA;AACA;;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYC,EAAZ;AACD,GAHQ,EAGN,CAACX,WAAW,CAACY,sBAAb,CAHM,CAAT;AAMA,QAAMC,SAAS,GAAGf,KAAK,CAACgB,GAAN,CAAWC,IAAD;AAAA;;AAAA,wBAC1B,oBAAC,KAAD,CAAO,QAAP;AAAgB,MAAA,GAAG,EAAEA,IAAI,CAACV,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,QAAD;AACE,MAAA,IAAI,EAAEU,IAAI,CAACC,MAAL,CAAYC,IADpB;AAEE,MAAA,OAAO,EAAEF,IAAI,CAACC,MAAL,CAAYE,OAFvB;AAGE,MAAA,OAAO,EAAEH,IAAI,CAACI,IAHhB;AAIE,MAAA,UAAU,2BAAEJ,IAAI,CAACC,MAAL,CAAYI,YAAd,0DAAE,sBAA0BC,GAJxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAD0B;AAAA,GAAV,CAAlB;AAWA,sBACE;AAAS,IAAA,SAAS,EAAE5B,KAAK,CAAC6B,cAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,SADH,CADF;AAMD,CA5CD;;AA8CA,eAAehB,cAAf","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport style from './ReadingSection.module.scss';\nimport PostCard from '../../../components/PostCard';\nimport { Post } from '../../../interfaces/Post';\nimport { UserContext } from '../../App';\nimport * as userEndpoints from '../../../endpoints/user';\n\nconst ReadingSection = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const contextUser = useContext(UserContext);\n\n  // Realoads posts from followed users every time the user\n  // changes (for instance, when following/unfollowing users).\n  // It also reloads when the user sends a post\n  useEffect(() => {\n    const getPosts = async () => {\n      const followedUsersPosts: Post[] = await userEndpoints.getPostsFromFollowedUsers(contextUser.user!._id!);\n      const ownPosts: Post[] = await userEndpoints.getUsersPosts(contextUser.user!._id!);\n      setPosts([...followedUsersPosts, ...ownPosts]);\n    };\n    getPosts();\n  }, [contextUser.user, contextUser.isPosting]);\n\n  // const seePostsFromUser = async () => {\n  //   const posts = await getUsersPosts(id);\n  //   contextUser.watchingOtherProfileId(id);\n  // }\n\n  useEffect(() => {\n    console.log('seeing profile')\n    console.log(id)\n  }, [contextUser.watchingOtherProfileId]);\n\n\n  const postsList = posts.map((post: Post) => (\n    <React.Fragment key={post._id}>\n      <PostCard\n        name={post.author.name}\n        surname={post.author.surname}\n        message={post.text}\n        pictureUrl={post.author.profileImage?.url}\n      />\n    </React.Fragment>\n  ));\n\n  return (\n    <section className={style.readingSection}>\n      {postsList}\n\n    </section>\n  );\n};\n\nexport default ReadingSection;\n"]},"metadata":{},"sourceType":"module"}