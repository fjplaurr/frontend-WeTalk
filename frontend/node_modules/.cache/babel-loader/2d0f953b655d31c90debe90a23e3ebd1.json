{"ast":null,"code":"var _jsxFileName = \"/Users/fjpu/Code/frontend-postApp/frontend/src/containers/Home/ReadingSection/ReadingSection.component.tsx\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport style from './ReadingSection.module.scss';\nimport PostCard from '../../../components/PostCard';\nimport { UserContext } from '../../App';\nimport * as userEndpoints from '../../../endpoints/user';\nimport ProfileHeader from './ProfileHeader';\n\nconst ReadingSection = () => {\n  const [posts, setPosts] = useState([]);\n  const contextUser = useContext(UserContext); // Loops an array of posts and transforms every string date into Date type\n\n  const parseDate = arr => {\n    const arrCopy = [...arr];\n    arrCopy.forEach((post, index) => {\n      const postCopy = { ...post\n      };\n      postCopy.date = new Date(post.date);\n      arrCopy[index] = postCopy;\n    });\n    return arrCopy;\n  }; // Realoads posts from followed users every time the user\n  // changes (for instance, when following/unfollowing users).\n  // It also reloads when the user sends a post\n\n\n  useEffect(() => {\n    const getPostsFromAllFollowedusers = async () => {\n      const followedUsersPosts = await userEndpoints.getPostsFromFollowedUsers(contextUser.user._id);\n      const ownPosts = await userEndpoints.getUsersPosts(contextUser.user._id);\n      ownPosts.forEach((post, index) => {\n        const postCopy = { ...post\n        };\n        postCopy.date = new Date(postCopy.date);\n        ownPosts[index] = postCopy;\n      });\n      setPosts([...parseDate(followedUsersPosts), ...parseDate(ownPosts)]);\n    };\n\n    const getPostsFromOneUser = async () => {\n      const usersPosts = await userEndpoints.getUsersPosts(contextUser.watchingOtherProfileId);\n      setPosts([...parseDate(usersPosts)]);\n    };\n\n    contextUser.watchingOtherProfileId ? getPostsFromOneUser() : getPostsFromAllFollowedusers();\n  }, [contextUser]);\n  const getPosts = posts.map((post, index) => {\n    if (contextUser.watchingOtherProfileId) {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: post._id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(PostCard, {\n        name: post.author.name,\n        surname: post.author.surname,\n        message: post.text,\n        picture: post.author.profileImage,\n        last: posts.length - 1 === index,\n        timestamp: post.date,\n        authorId: post.author._id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: post._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PostCard, {\n      name: post.author.name,\n      surname: post.author.surname,\n      message: post.text,\n      picture: post.author.profileImage,\n      last: posts.length - 1 === index,\n      timestamp: post.date,\n      authorId: post.author._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }));\n  });\n\n  const postsFromEveryone = () => getPosts;\n\n  const PostFromOne = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProfileHeader, {\n    userId: contextUser.watchingOtherProfileId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }), getPosts);\n\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: style.readingSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, contextUser.watchingOtherProfileId ? PostFromOne() : postsFromEveryone());\n};\n\nexport default ReadingSection;","map":{"version":3,"sources":["/Users/fjpu/Code/frontend-postApp/frontend/src/containers/Home/ReadingSection/ReadingSection.component.tsx"],"names":["React","useState","useEffect","useContext","style","PostCard","UserContext","userEndpoints","ProfileHeader","ReadingSection","posts","setPosts","contextUser","parseDate","arr","arrCopy","forEach","post","index","postCopy","date","Date","getPostsFromAllFollowedusers","followedUsersPosts","getPostsFromFollowedUsers","user","_id","ownPosts","getUsersPosts","getPostsFromOneUser","usersPosts","watchingOtherProfileId","getPosts","map","author","name","surname","text","profileImage","length","postsFromEveryone","PostFromOne","readingSection"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport style from './ReadingSection.module.scss';\nimport PostCard from '../../../components/PostCard';\nimport { Post } from '../../../interfaces/Post';\nimport { UserContext } from '../../App';\nimport * as userEndpoints from '../../../endpoints/user';\nimport ProfileHeader from './ProfileHeader';\n\nconst ReadingSection = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const contextUser = useContext(UserContext);\n\n  // Loops an array of posts and transforms every string date into Date type\n  const parseDate = (arr: Post[]) => {\n    const arrCopy = [...arr];\n    arrCopy.forEach((post, index) => {\n      const postCopy = { ...post };\n      postCopy.date = new Date(post.date);\n      arrCopy[index] = postCopy;\n    });\n    return arrCopy;\n  };\n\n  // Realoads posts from followed users every time the user\n  // changes (for instance, when following/unfollowing users).\n  // It also reloads when the user sends a post\n  useEffect(() => {\n    const getPostsFromAllFollowedusers = async () => {\n      const followedUsersPosts:\n        Post[] = await userEndpoints.getPostsFromFollowedUsers(contextUser.user!._id!);\n      const ownPosts: Post[] = await userEndpoints.getUsersPosts(contextUser.user!._id!);\n      ownPosts.forEach((post, index) => {\n        const postCopy = { ...post };\n        postCopy.date = new Date(postCopy.date);\n        ownPosts[index] = postCopy;\n      });\n      setPosts([...parseDate(followedUsersPosts), ...parseDate(ownPosts)]);\n    };\n    const getPostsFromOneUser = async () => {\n      const usersPosts:\n        Post[] = await userEndpoints.getUsersPosts(contextUser.watchingOtherProfileId);\n      setPosts([...parseDate(usersPosts)]);\n    };\n    contextUser.watchingOtherProfileId ? getPostsFromOneUser() : getPostsFromAllFollowedusers();\n  }, [contextUser]);\n\n  const getPosts = posts.map((post: Post, index: number) => {\n    if (contextUser.watchingOtherProfileId) {\n      return (\n        <React.Fragment key={post._id}>\n          <PostCard\n            name={post.author.name}\n            surname={post.author.surname}\n            message={post.text}\n            picture={post.author.profileImage}\n            last={posts.length - 1 === index}\n            timestamp={post.date}\n            authorId={post.author._id}\n          />\n        </React.Fragment>\n      );\n    }\n    return (\n      <React.Fragment key={post._id}>\n        <PostCard\n          name={post.author.name}\n          surname={post.author.surname}\n          message={post.text}\n          picture={post.author.profileImage}\n          last={posts.length - 1 === index}\n          timestamp={post.date}\n          authorId={post.author._id}\n        />\n      </React.Fragment>\n    );\n  });\n\n  const postsFromEveryone = () => getPosts;\n\n  const PostFromOne = () => (\n    <>\n      <ProfileHeader userId={contextUser.watchingOtherProfileId} />\n      {getPosts}\n    </>\n  );\n\n  return (\n    <section className={style.readingSection}>\n      {contextUser.watchingOtherProfileId ? PostFromOne() : postsFromEveryone()}\n    </section>\n  );\n};\n\nexport default ReadingSection;\n"]},"metadata":{},"sourceType":"module"}