{"ast":null,"code":"var _jsxFileName = \"/Users/fjpu/Code/frontend-postApp/src/components/SearchBar/SearchBar.component.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport TextInput from '../TextInput';\nimport * as userEndpoints from '../../endpoints/user';\nimport { Search } from '../../assets/icons';\n\nconst SearchBar = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [userResults, setUserResults] = useState([]); // Sets searched term while writing\n\n  const handleChange = e => {\n    setSearchTerm(e.currentTarget.value);\n  }; // Makes a search every time the user inputs a carachter\n\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const users = await userEndpoints.getFilteredUsers(searchTerm);\n      setUserResults(users);\n    }; // Performs search only if the searchTerm is not empty\n\n\n    searchTerm && fetchUsers();\n  }, [searchTerm]);\n  useEffect(() => {\n    console.log('results are');\n    console.log(userResults);\n  }, [userResults]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TextInput, {\n    type: \"text\",\n    placeholder: \"Search\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default SearchBar;","map":{"version":3,"sources":["/Users/fjpu/Code/frontend-postApp/src/components/SearchBar/SearchBar.component.tsx"],"names":["React","useState","useEffect","TextInput","userEndpoints","Search","SearchBar","searchTerm","setSearchTerm","userResults","setUserResults","handleChange","e","currentTarget","value","fetchUsers","users","getFilteredUsers","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAGA,OAAO,KAAKC,aAAZ,MAA+B,sBAA/B;AACA,SAASC,MAAT,QAAuB,oBAAvB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAS,EAAT,CAA9C,CAFsB,CAItB;;AACA,QAAMU,YAAY,GAAIC,CAAD,IAA4C;AAC/DJ,IAAAA,aAAa,CAACI,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAAb;AACD,GAFD,CALsB,CAStB;;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,UAAU,GAAG,YAAY;AAC7B,YAAMC,KAAa,GAAG,MAAMZ,aAAa,CAACa,gBAAd,CAA+BV,UAA/B,CAA5B;AACAG,MAAAA,cAAc,CAACM,KAAD,CAAd;AACD,KAHD,CADc,CAKd;;;AACAT,IAAAA,UAAU,IAAIQ,UAAU,EAAxB;AACD,GAPQ,EAON,CAACR,UAAD,CAPM,CAAT;AASAL,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYV,WAAZ;AACD,GAHQ,EAGN,CAACA,WAAD,CAHM,CAAT;AAKA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC,QAFd;AAGE,IAAA,QAAQ,EAAEE,YAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,CADF;AAWD,CAnCD;;AAqCA,eAAeL,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TextInput from '../TextInput';\nimport ProfileCard from '../ProfileCard';\nimport { User } from '../../interfaces/User';\nimport * as userEndpoints from '../../endpoints/user';\nimport { Search } from '../../assets/icons';\n\nconst SearchBar = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [userResults, setUserResults] = useState<User[]>([]);\n\n  // Sets searched term while writing\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.currentTarget.value);\n  };\n\n  // Makes a search every time the user inputs a carachter\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const users: User[] = await userEndpoints.getFilteredUsers(searchTerm);\n      setUserResults(users);\n    };\n    // Performs search only if the searchTerm is not empty\n    searchTerm && fetchUsers();\n  }, [searchTerm]);\n\n  useEffect(() => {\n    console.log('results are');\n    console.log(userResults);\n  }, [userResults]);\n\n  return (\n    <div>\n      <TextInput\n        type=\"text\"\n        placeholder=\"Search\"\n        onChange={handleChange}\n      >\n        <Search />\n      </TextInput>\n    </div>\n  );\n};\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}