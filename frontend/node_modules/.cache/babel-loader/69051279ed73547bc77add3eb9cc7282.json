{"ast":null,"code":"var _jsxFileName = \"/Users/fjpu/Code/frontend-postApp/src/components/SearchBar/SearchBarTextInput/SearchBarTextInput.component.tsx\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport styles from './SearchBarTextInput.module.scss';\n\nconst SearchBarTextInput = ({\n  type,\n  onChange,\n  placeholder,\n  minLength,\n  children,\n  color = 'smokeWhite',\n  idInput\n}) => {\n  const [value, setValue] = useState('');\n\n  const handleValueChange = event => {\n    onChange && onChange(event);\n    setValue(event.target.value);\n  }; // Refs for label and input elements.\n\n\n  const labelRef = useRef(null);\n  const inputRef = useRef(null); // Changes label's className to be able to put it on top of the input when it is\n  // not focused but contains data writen by the user.\n\n  useEffect(() => {\n    var _inputRef$current;\n\n    if ((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value) {\n      labelRef.current.className = `${styles.label} ${styles.labelOnTop}`;\n    } else {\n      labelRef.current.className = `${styles.label}`;\n    }\n  }, [value]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.textInputWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, children && children, /*#__PURE__*/React.createElement(\"input\", {\n    className: color === 'white' ? styles.inputWhite : styles.inputSmokeWhite,\n    required: true,\n    onChange: handleValueChange,\n    value: value,\n    type: type,\n    minLength: minLength,\n    ref: inputRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    ref: labelRef,\n    htmlFor: idInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, placeholder));\n};\n\nexport default SearchBarTextInput;","map":{"version":3,"sources":["/Users/fjpu/Code/frontend-postApp/src/components/SearchBar/SearchBarTextInput/SearchBarTextInput.component.tsx"],"names":["React","useState","useRef","useEffect","styles","SearchBarTextInput","type","onChange","placeholder","minLength","children","color","idInput","value","setValue","handleValueChange","event","target","labelRef","inputRef","current","className","label","labelOnTop","textInputWrapper","inputWhite","inputSmokeWhite"],"mappings":";AAAA,OAAOA,KAAP,IACEC,QADF,EACuBC,MADvB,EAC+BC,SAD/B,QAEO,OAFP;AAGA,OAAOC,MAAP,MAAmB,kCAAnB;;AAYA,MAAMC,kBAAkB,GAAG,CAAC;AAC1BC,EAAAA,IAD0B;AACpBC,EAAAA,QADoB;AACVC,EAAAA,WADU;AACGC,EAAAA,SADH;AACcC,EAAAA,QADd;AACwBC,EAAAA,KAAK,GAAG,YADhC;AAC8CC,EAAAA;AAD9C,CAAD,KAEI;AAC7B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;;AACA,QAAMc,iBAA6D,GAAIC,KAAD,IAAW;AAC/ET,IAAAA,QAAQ,IAAIA,QAAQ,CAACS,KAAD,CAApB;AACAF,IAAAA,QAAQ,CAACE,KAAK,CAACC,MAAN,CAAaJ,KAAd,CAAR;AACD,GAHD,CAF6B,CAO7B;;;AACA,QAAMK,QAAQ,GAAGhB,MAAM,CAAmB,IAAnB,CAAvB;AACA,QAAMiB,QAAQ,GAAGjB,MAAM,CAAmB,IAAnB,CAAvB,CAT6B,CAW7B;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,6BAAIgB,QAAQ,CAACC,OAAb,sDAAI,kBAAkBP,KAAtB,EAA6B;AAC3BK,MAAAA,QAAQ,CAAEE,OAAV,CAAmBC,SAAnB,GAAgC,GAAEjB,MAAM,CAACkB,KAAM,IAAGlB,MAAM,CAACmB,UAAW,EAApE;AACD,KAFD,MAEO;AACLL,MAAAA,QAAQ,CAAEE,OAAV,CAAmBC,SAAnB,GAAgC,GAAEjB,MAAM,CAACkB,KAAM,EAA/C;AACD;AACF,GANQ,EAMN,CAACT,KAAD,CANM,CAAT;AAOA,sBACE;AAAK,IAAA,SAAS,EAAET,MAAM,CAACoB,gBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,QAAQ,IAAIA,QADf,eAEE;AACE,IAAA,SAAS,EAAEC,KAAK,KAAK,OAAV,GAAoBP,MAAM,CAACqB,UAA3B,GAAwCrB,MAAM,CAACsB,eAD5D;AAEE,IAAA,QAAQ,MAFV;AAGE,IAAA,QAAQ,EAAEX,iBAHZ;AAIE,IAAA,KAAK,EAAEF,KAJT;AAKE,IAAA,IAAI,EAAEP,IALR;AAME,IAAA,SAAS,EAAEG,SANb;AAOE,IAAA,GAAG,EAAEU,QAPP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAWE;AACE,IAAA,GAAG,EAAED,QADP;AAEE,IAAA,OAAO,EAAEN,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGJ,WAJH,CAXF,CADF;AAoBD,CA1CD;;AA4CA,eAAeH,kBAAf","sourcesContent":["import React, {\n  useState, ReactNode, useRef, useEffect,\n} from 'react';\nimport styles from './SearchBarTextInput.module.scss';\n\ntype SearchBarTextInputProps = {\n  type: 'text' | 'email' | 'password';\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  minLength?: number;\n  children?: ReactNode;\n  color?: 'white' | 'smokeWhite';\n  idInput: string;\n}\n\nconst SearchBarTextInput = ({\n  type, onChange, placeholder, minLength, children, color = 'smokeWhite', idInput,\n}: SearchBarTextInputProps) => {\n  const [value, setValue] = useState('');\n  const handleValueChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    onChange && onChange(event);\n    setValue(event.target.value);\n  };\n\n  // Refs for label and input elements.\n  const labelRef = useRef<HTMLLabelElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Changes label's className to be able to put it on top of the input when it is\n  // not focused but contains data writen by the user.\n  useEffect(() => {\n    if (inputRef.current?.value) {\n      labelRef!.current!.className = `${styles.label} ${styles.labelOnTop}`;\n    } else {\n      labelRef!.current!.className = `${styles.label}`;\n    }\n  }, [value]);\n  return (\n    <div className={styles.textInputWrapper}>\n      {children && children}\n      <input\n        className={color === 'white' ? styles.inputWhite : styles.inputSmokeWhite}\n        required\n        onChange={handleValueChange}\n        value={value}\n        type={type}\n        minLength={minLength}\n        ref={inputRef}\n      />\n      <label\n        ref={labelRef}\n        htmlFor={idInput}\n      >\n        {placeholder}\n      </label>\n    </div>\n  );\n};\n\nexport default SearchBarTextInput;\n"]},"metadata":{},"sourceType":"module"}