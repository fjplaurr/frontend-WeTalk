{"ast":null,"code":"var _jsxFileName = \"/Users/fjpu/Code/frontend-postApp/src/components/SearchBar/SearchBar.component.tsx\";\nimport React, { useState, useEffect, useContext, useRef } from 'react';\nimport TextInput from '../TextInput';\nimport ProfileCard from '../ProfileCard';\nimport * as userEndpoints from '../../endpoints/user';\nimport { Search } from '../../assets/icons';\nimport styles from './SearchBar.module.scss';\nimport { UserContext } from '../../containers/App';\n\nconst SearchBar = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [userResults, setUserResults] = useState([]); // Ref for the broken down results div\n\n  const wrapperRef = useRef(null); // Reads current connected user from Context\n\n  const contextUser = useContext(UserContext); // Sets searched term while writing\n\n  const handleChange = e => {\n    setSearchTerm(e.currentTarget.value);\n  }; // Makes a search every time the user inputs a carachter\n\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const users = await userEndpoints.getFilteredUsers(searchTerm);\n      setUserResults(users);\n    }; // Performs search only if the searchTerm is not empty. If it is not\n    // empty (e.g., cleaning the input), then the results must change to empty\n\n\n    if (searchTerm) {\n      fetchUsers();\n    } else {\n      setUserResults([]);\n    }\n  }, [searchTerm]);\n\n  const unfollowUser = async (event, clickedUser) => {\n    const {\n      user: currentUser\n    } = contextUser;\n    const followingModified = currentUser.following.filter(el => el.user !== clickedUser._id);\n    const modifiedUser = { ...currentUser,\n      following: followingModified\n    }; // Modify user in context\n\n    await contextUser.setUser(modifiedUser); // Modify list of followed users in database\n\n    await userEndpoints.update(modifiedUser);\n  };\n\n  const followUser = async (event, clickedUser) => {\n    const contextUserCopy = { ...contextUser.user\n    };\n    contextUserCopy.following.push({\n      user: clickedUser._id\n    }); // Modify user in context\n\n    await contextUser.setUser(contextUserCopy); // Modify list of followed users in database\n\n    await userEndpoints.update(contextUserCopy);\n  };\n\n  const usersList = userResults.map(user => {\n    var _contextUser$user, _user$profileImage2;\n\n    const usersFollowing = (_contextUser$user = contextUser.user) === null || _contextUser$user === void 0 ? void 0 : _contextUser$user.following;\n    const allUserIds = usersFollowing === null || usersFollowing === void 0 ? void 0 : usersFollowing.map(element => element.user);\n    const isFollowing = allUserIds === null || allUserIds === void 0 ? void 0 : allUserIds.includes(user._id);\n\n    if (isFollowing) {\n      var _user$profileImage;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: user._id,\n        className: styles.targetWrapper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ProfileCard, {\n        description: user.description,\n        name: user.name,\n        surname: user.surname,\n        pictureUrl: (_user$profileImage = user.profileImage) === null || _user$profileImage === void 0 ? void 0 : _user$profileImage.url,\n        onClick: e => unfollowUser(e, user),\n        textButton: \"Unfollow\",\n        colorButton: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: user._id,\n      className: styles.targetWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ProfileCard, {\n      description: user.description,\n      name: user.name,\n      surname: user.surname,\n      pictureUrl: (_user$profileImage2 = user.profileImage) === null || _user$profileImage2 === void 0 ? void 0 : _user$profileImage2.url,\n      onClick: e => followUser(e, user),\n      textButton: \"Follow\",\n      colorButton: \"blue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }));\n  }); // sets if the user is writing in the search input or not\n\n  useEffect(() => {\n    if (searchTerm) {\n      contextUser.setIsSearching(true);\n    } else {\n      contextUser.setIsSearching(false);\n    }\n  }, [searchTerm]); // closes the search results if the user clicks outside\n\n  useEffect(() => {\n    // Detects if clicked on outside of element\n    function handleClickOutside(event) {\n      if (wrapperRef.current && wrapperRef.current.contains(event.target)) {\n        alert('You clicked outside of me!');\n      }\n    } // Bind the event listener\n\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [wrapperRef]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextInput, {\n    type: \"text\",\n    placeholder: \"Search\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: userResults.length > 0 ? styles.resultsWrapperShow : styles.resultsWrapperHide,\n    ref: wrapperRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, userResults.length > 0 && usersList));\n};\n\nexport default SearchBar;","map":{"version":3,"sources":["/Users/fjpu/Code/frontend-postApp/src/components/SearchBar/SearchBar.component.tsx"],"names":["React","useState","useEffect","useContext","useRef","TextInput","ProfileCard","userEndpoints","Search","styles","UserContext","SearchBar","searchTerm","setSearchTerm","userResults","setUserResults","wrapperRef","contextUser","handleChange","e","currentTarget","value","fetchUsers","users","getFilteredUsers","unfollowUser","event","clickedUser","user","currentUser","followingModified","following","filter","el","_id","modifiedUser","setUser","update","followUser","contextUserCopy","push","usersList","map","usersFollowing","allUserIds","element","isFollowing","includes","targetWrapper","description","name","surname","profileImage","url","setIsSearching","handleClickOutside","current","contains","target","alert","document","addEventListener","removeEventListener","length","resultsWrapperShow","resultsWrapperHide"],"mappings":"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","sourcesContent":["import React, {\n  useState, useEffect, useContext, useRef,\n} from 'react';\nimport TextInput from '../TextInput';\nimport ProfileCard from '../ProfileCard';\nimport { User } from '../../interfaces/User';\nimport * as userEndpoints from '../../endpoints/user';\nimport { Search } from '../../assets/icons';\nimport styles from './SearchBar.module.scss';\nimport { UserContext } from '../../containers/App';\n\nconst SearchBar = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [userResults, setUserResults] = useState<User[]>([]);\n\n  // Ref for the broken down results div\n  const wrapperRef = useRef<HTMLDivElement>(null);\n\n  // Reads current connected user from Context\n  const contextUser = useContext(UserContext);\n\n  // Sets searched term while writing\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.currentTarget.value);\n  };\n\n  // Makes a search every time the user inputs a carachter\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const users: User[] = await userEndpoints.getFilteredUsers(searchTerm);\n      setUserResults(users);\n    };\n    // Performs search only if the searchTerm is not empty. If it is not\n    // empty (e.g., cleaning the input), then the results must change to empty\n    if (searchTerm) {\n      fetchUsers();\n    } else {\n      setUserResults([]);\n    }\n  }, [searchTerm]);\n\n  const unfollowUser = async (event: React.MouseEvent<HTMLButtonElement>, clickedUser: User) => {\n    const { user: currentUser } = contextUser;\n    const followingModified = currentUser!.following!.filter((el) => el.user !== clickedUser._id);\n    const modifiedUser: User = { ...currentUser!, following: followingModified };\n    // Modify user in context\n    await contextUser.setUser(modifiedUser);\n    // Modify list of followed users in database\n    await userEndpoints.update(modifiedUser);\n  };\n\n  const followUser = async (event: React.MouseEvent<HTMLButtonElement>, clickedUser: User) => {\n    const contextUserCopy: User = { ...contextUser!.user! };\n    contextUserCopy.following!.push({ user: clickedUser._id! });\n    // Modify user in context\n    await contextUser.setUser(contextUserCopy);\n    // Modify list of followed users in database\n    await userEndpoints.update(contextUserCopy);\n  };\n\n  const usersList = userResults.map((user: User) => {\n    const usersFollowing = contextUser.user?.following;\n    const allUserIds = usersFollowing?.map((element: { user: string }) => element.user);\n    const isFollowing = allUserIds?.includes(user._id!);\n    if (isFollowing) {\n      return (\n        <div\n          key={user._id}\n          className={styles.targetWrapper}\n        >\n          <ProfileCard\n            description={user.description}\n            name={user.name}\n            surname={user.surname}\n            pictureUrl={user.profileImage?.url}\n            onClick={(e) => unfollowUser(e, user)}\n            textButton=\"Unfollow\"\n            colorButton=\"red\"\n          />\n        </div>\n      );\n    }\n    return (\n      <div\n        key={user._id}\n        className={styles.targetWrapper}\n      >\n        <ProfileCard\n          description={user.description}\n          name={user.name}\n          surname={user.surname}\n          pictureUrl={user.profileImage?.url}\n          onClick={(e) => followUser(e, user)}\n          textButton=\"Follow\"\n          colorButton=\"blue\"\n        />\n      </div>\n    );\n  });\n\n  // sets if the user is writing in the search input or not\n  useEffect(() => {\n    if (searchTerm) {\n      contextUser.setIsSearching(true);\n    } else {\n      contextUser.setIsSearching(false);\n    }\n  }, [searchTerm]);\n\n  // closes the search results if the user clicks outside\n  useEffect(() => {\n    // Detects if clicked on outside of element\n    function handleClickOutside(event: any) {\n      if (wrapperRef.current && wrapperRef.current.contains(event.target)) {\n        alert('You clicked outside of me!');\n      }\n    }\n    // Bind the event listener\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [wrapperRef]);\n\n  return (\n    <>\n      <TextInput\n        type=\"text\"\n        placeholder=\"Search\"\n        onChange={handleChange}\n      >\n        <Search />\n      </TextInput>\n      {/* Show div with results when the results array has data */}\n      <div\n        className={userResults.length > 0 ? styles.resultsWrapperShow : styles.resultsWrapperHide}\n        ref={wrapperRef}\n      >\n        {userResults.length > 0 && usersList}\n      </div>\n    </>\n  );\n};\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}