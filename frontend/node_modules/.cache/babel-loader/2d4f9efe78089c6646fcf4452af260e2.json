{"ast":null,"code":"const get = async url => {\n  const response = await fetch(url);\n  const json = await response.json();\n  return json;\n};\n\nconst post = async (url, data) => {\n  const body = JSON.stringify(data);\n  const request = {\n    method: 'POST',\n    body,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const response = await fetch(url, request);\n  const json = await response.json();\n  return json;\n};\n\nconst put = async (url, data) => {\n  const body = JSON.stringify(data);\n  const request = {\n    method: 'PUT',\n    body,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const response = await fetch(url, request);\n  const json = await response.json();\n  return json;\n};\n\nconst deleteById = async url => {\n  const request = {\n    method: 'DELETE'\n  };\n  const response = await fetch(url, request);\n  const json = await response.json();\n  return json;\n};\n\nconst postFile = async (url, file, userId, fileName) => {\n  const formData = new FormData();\n  formData.append('photo', file);\n  formData.append('userId', userId);\n  formData.append('fileName', fileName);\n  const request = {\n    method: 'POST',\n    body: formData\n  };\n  const response = await fetch(url, request);\n  const json = await response.json();\n  return json;\n};\n\nconst getFile = async (url, fileId) => {\n  const response = await fetch(`${url}/${fileId}`);\n  const contentType = response.headers.get('content-type');\n  const json = await response.json();\n  return json;\n};\n\nexport { get, post, put, deleteById, postFile, getFile };","map":{"version":3,"sources":["/Users/fjpu/Code/frontend-postApp/src/helpers/fetch.ts"],"names":["get","url","response","fetch","json","post","data","body","JSON","stringify","request","method","headers","put","deleteById","postFile","file","userId","fileName","formData","FormData","append","getFile","fileId","contentType"],"mappings":"AAAA,MAAMA,GAAG,GAAG,MAAOC,GAAP,IAAuB;AACjC,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,QAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;AACA,SAAOA,IAAP;AACD,CAJD;;AAMA,MAAMC,IAAI,GAAG,OAAOJ,GAAP,EAAoBK,IAApB,KAAiC;AAC5C,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAb;AACA,QAAMI,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE,MADM;AAEdJ,IAAAA,IAFc;AAGdK,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAHK,GAAhB;AAOA,QAAMV,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAMS,OAAN,CAA5B;AACA,QAAMN,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;AACA,SAAOA,IAAP;AACD,CAZD;;AAcA,MAAMS,GAAG,GAAG,OAAOZ,GAAP,EAAoBK,IAApB,KAAiC;AAC3C,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAb;AACA,QAAMI,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE,KADM;AAEdJ,IAAAA,IAFc;AAGdK,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAHK,GAAhB;AAOA,QAAMV,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAMS,OAAN,CAA5B;AACA,QAAMN,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;AACA,SAAOA,IAAP;AACD,CAZD;;AAcA,MAAMU,UAAU,GAAG,MAAOb,GAAP,IAAuB;AACxC,QAAMS,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE;AADM,GAAhB;AAGA,QAAMT,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAMS,OAAN,CAA5B;AACA,QAAMN,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;AACA,SAAOA,IAAP;AACD,CAPD;;AASA,MAAMW,QAAQ,GAAG,OAAOd,GAAP,EAAoBe,IAApB,EAAgCC,MAAhC,EAAgDC,QAAhD,KAAqE;AACpF,QAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,EAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBL,IAAzB;AACAG,EAAAA,QAAQ,CAACE,MAAT,CAAgB,QAAhB,EAA0BJ,MAA1B;AACAE,EAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4BH,QAA5B;AACA,QAAMR,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE,MADM;AAEdJ,IAAAA,IAAI,EAAEY;AAFQ,GAAhB;AAIA,QAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAMS,OAAN,CAA5B;AACA,QAAMN,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;AACA,SAAOA,IAAP;AACD,CAZD;;AAcA,MAAMkB,OAAO,GAAG,OAAOrB,GAAP,EAAoBsB,MAApB,KAAuC;AACrD,QAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEF,GAAI,IAAGsB,MAAO,EAAlB,CAA5B;AACA,QAAMC,WAAW,GAAGtB,QAAQ,CAACU,OAAT,CAAiBZ,GAAjB,CAAqB,cAArB,CAApB;AACA,QAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;AACA,SAAOA,IAAP;AACD,CALD;;AAOA,SACEJ,GADF,EACOK,IADP,EACaQ,GADb,EACkBC,UADlB,EAC8BC,QAD9B,EACwCO,OADxC","sourcesContent":["const get = async (url: string) => {\n  const response = await fetch(url);\n  const json = await response.json();\n  return json;\n};\n\nconst post = async (url: string, data: {}) => {\n  const body = JSON.stringify(data);\n  const request = {\n    method: 'POST',\n    body,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  const response = await fetch(url, request);\n  const json = await response.json();\n  return json;\n};\n\nconst put = async (url: string, data: {}) => {\n  const body = JSON.stringify(data);\n  const request = {\n    method: 'PUT',\n    body,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  const response = await fetch(url, request);\n  const json = await response.json();\n  return json;\n};\n\nconst deleteById = async (url: string) => {\n  const request = {\n    method: 'DELETE',\n  };\n  const response = await fetch(url, request);\n  const json = await response.json();\n  return json;\n};\n\nconst postFile = async (url: string, file: File, userId: string, fileName: string) => {\n  const formData = new FormData();\n  formData.append('photo', file);\n  formData.append('userId', userId);\n  formData.append('fileName', fileName);\n  const request = {\n    method: 'POST',\n    body: formData,\n  };\n  const response = await fetch(url, request);\n  const json = await response.json();\n  return json;\n};\n\nconst getFile = async (url: string, fileId: string) => {\n  const response = await fetch(`${url}/${fileId}`);\n  const contentType = response.headers.get('content-type');\n  const json = await response.json();\n  return json;\n};\n\nexport {\n  get, post, put, deleteById, postFile, getFile,\n};\n"]},"metadata":{},"sourceType":"module"}